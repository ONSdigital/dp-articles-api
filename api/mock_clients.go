// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package api

import (
	"context"
	"github.com/ONSdigital/dp-api-clients-go/v2/zebedee"
	"github.com/ONSdigital/dp-healthcheck/healthcheck"
	"sync"
)

// Ensure, that ZebedeeClientMock does implement ZebedeeClient.
// If this is not the case, regenerate this file with moq.
var _ ZebedeeClient = &ZebedeeClientMock{}

// ZebedeeClientMock is a mock implementation of ZebedeeClient.
//
// 	func TestSomethingThatUsesZebedeeClient(t *testing.T) {
//
// 		// make and configure a mocked ZebedeeClient
// 		mockedZebedeeClient := &ZebedeeClientMock{
// 			CheckerFunc: func(ctx context.Context, check *healthcheck.CheckState) error {
// 				panic("mock out the Checker method")
// 			},
// 			GetBulletinFunc: func(ctx context.Context, userAccessToken string, lang string, uri string) (zebedee.Bulletin, error) {
// 				panic("mock out the GetBulletin method")
// 			},
// 		}
//
// 		// use mockedZebedeeClient in code that requires ZebedeeClient
// 		// and then make assertions.
//
// 	}
type ZebedeeClientMock struct {
	// CheckerFunc mocks the Checker method.
	CheckerFunc func(ctx context.Context, check *healthcheck.CheckState) error

	// GetBulletinFunc mocks the GetBulletin method.
	GetBulletinFunc func(ctx context.Context, userAccessToken string, lang string, uri string) (zebedee.Bulletin, error)

	// calls tracks calls to the methods.
	calls struct {
		// Checker holds details about calls to the Checker method.
		Checker []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Check is the check argument value.
			Check *healthcheck.CheckState
		}
		// GetBulletin holds details about calls to the GetBulletin method.
		GetBulletin []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// UserAccessToken is the userAccessToken argument value.
			UserAccessToken string
			// Lang is the lang argument value.
			Lang string
			// URI is the uri argument value.
			URI string
		}
	}
	lockChecker     sync.RWMutex
	lockGetBulletin sync.RWMutex
}

// Checker calls CheckerFunc.
func (mock *ZebedeeClientMock) Checker(ctx context.Context, check *healthcheck.CheckState) error {
	if mock.CheckerFunc == nil {
		panic("ZebedeeClientMock.CheckerFunc: method is nil but ZebedeeClient.Checker was just called")
	}
	callInfo := struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}{
		Ctx:   ctx,
		Check: check,
	}
	mock.lockChecker.Lock()
	mock.calls.Checker = append(mock.calls.Checker, callInfo)
	mock.lockChecker.Unlock()
	return mock.CheckerFunc(ctx, check)
}

// CheckerCalls gets all the calls that were made to Checker.
// Check the length with:
//     len(mockedZebedeeClient.CheckerCalls())
func (mock *ZebedeeClientMock) CheckerCalls() []struct {
	Ctx   context.Context
	Check *healthcheck.CheckState
} {
	var calls []struct {
		Ctx   context.Context
		Check *healthcheck.CheckState
	}
	mock.lockChecker.RLock()
	calls = mock.calls.Checker
	mock.lockChecker.RUnlock()
	return calls
}

// GetBulletin calls GetBulletinFunc.
func (mock *ZebedeeClientMock) GetBulletin(ctx context.Context, userAccessToken string, lang string, uri string) (zebedee.Bulletin, error) {
	if mock.GetBulletinFunc == nil {
		panic("ZebedeeClientMock.GetBulletinFunc: method is nil but ZebedeeClient.GetBulletin was just called")
	}
	callInfo := struct {
		Ctx             context.Context
		UserAccessToken string
		Lang            string
		URI             string
	}{
		Ctx:             ctx,
		UserAccessToken: userAccessToken,
		Lang:            lang,
		URI:             uri,
	}
	mock.lockGetBulletin.Lock()
	mock.calls.GetBulletin = append(mock.calls.GetBulletin, callInfo)
	mock.lockGetBulletin.Unlock()
	return mock.GetBulletinFunc(ctx, userAccessToken, lang, uri)
}

// GetBulletinCalls gets all the calls that were made to GetBulletin.
// Check the length with:
//     len(mockedZebedeeClient.GetBulletinCalls())
func (mock *ZebedeeClientMock) GetBulletinCalls() []struct {
	Ctx             context.Context
	UserAccessToken string
	Lang            string
	URI             string
} {
	var calls []struct {
		Ctx             context.Context
		UserAccessToken string
		Lang            string
		URI             string
	}
	mock.lockGetBulletin.RLock()
	calls = mock.calls.GetBulletin
	mock.lockGetBulletin.RUnlock()
	return calls
}
